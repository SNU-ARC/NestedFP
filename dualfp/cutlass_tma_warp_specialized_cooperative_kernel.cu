// This file was automatically generated by the CUTLASS 3.5.1 Python interface (https://github.com/nvidia/cutlass/python)

#include <cuda_runtime.h>
#include <torch/extension.h>
#include <ATen/ATen.h>
#include <ATen/cuda/CUDAContext.h>
#include "cutlass/cutlass.h"
#include "cutlass/util/device_memory.h"

#include "cutlass/gemm/device/gemm_universal_adapter.h"
#include "cutlass/gemm/collective/collective_builder.hpp"
#include "cutlass/gemm/device/gemm_universal_adapter.h"
#include "cutlass/gemm/kernel/gemm_universal.hpp"
#include "cutlass/epilogue/collective/collective_builder.hpp"
#include "cutlass/util/packed_stride.hpp"

using MainloopScheduleType = cutlass::gemm::KernelTmaWarpSpecializedCooperative;
using EpilogueScheduleType = cutlass::epilogue::TmaWarpSpecializedCooperative;
using TileSchedulerType = cutlass::gemm::PersistentScheduler;

using namespace cute;

// template<int T1, int T2, int T3, int C1, int C2, int C3>
// at::Tensor cutlass_tma_warp_specialized_cooperative_kernel(const at::Tensor& A, const at::Tensor& B) {
//   at::optional<const at::Tensor> C=at::nullopt;
//   float alpha=1.f;
//   float beta=0.f;

//   using CollectiveEpilogue =
//     typename cutlass::epilogue::collective::CollectiveBuilder<
//       cutlass::arch::Sm90, cutlass::arch::OpClassTensorOp,
//       cute::Shape<cute::Int<T1>, cute::Int<T2>, cute::Int<T3>>,
//       cute::Shape<cute::_1,cute::_1,cute::_1>,
//       cutlass::epilogue::collective::EpilogueTileAuto,
//       float, float,
//       cutlass::half_t, cutlass::layout::ColumnMajor, 8,
//       cutlass::half_t, cutlass::layout::ColumnMajor, 8,
//       EpilogueScheduleType
//     >::CollectiveOp;

//   using CollectiveMainloop =
//     typename cutlass::gemm::collective::CollectiveBuilder<
//       cutlass::arch::Sm90, cutlass::arch::OpClassTensorOp,
//       cutlass::half_t, cutlass::layout::RowMajor, 8,
//       cutlass::half_t, cutlass::layout::ColumnMajor, 8,
//       float,
//       cute::Shape<cute::Int<T1>, cute::Int<T2>, cute::Int<T3>>,
//       cute::Shape<cute::Int<C1>, cute::Int<C2>, cute::Int<C3>>,
//       cutlass::gemm::collective::StageCountAutoCarveout<static_cast<int>(sizeof(typename CollectiveEpilogue::SharedStorage))>,
//       MainloopScheduleType
//     >::CollectiveOp;

//   using GemmKernel = cutlass::gemm::kernel::GemmUniversal<
//       Shape<int,int,int,int>,
//       CollectiveMainloop,
//       CollectiveEpilogue,
//       TileSchedulerType
//   >;

//   // Define device-level operator
//   using DeviceKernel = cutlass::gemm::device::GemmUniversalAdapter<GemmKernel>;

//   using StrideA = typename DeviceKernel::GemmKernel::StrideA;
//   using StrideB = typename DeviceKernel::GemmKernel::StrideB;
//   using StrideC = typename DeviceKernel::GemmKernel::StrideC;
//   using StrideD = typename DeviceKernel::GemmKernel::StrideD;

//   using ElementCompute = typename DeviceKernel::EpilogueOutputOp::ElementCompute;

//   bool hw_info_queried = false;
//   cutlass::KernelHardwareInfo hw_info;

//   int M = A.size(0);
//   int N = B.size(0);
//   int K = A.size(1);
//   int L = 1;

//   // Query hardware info if we haven't already
//   if (!hw_info_queried) {
//       hw_info.device_id = 0;
//       hw_info.sm_count = cutlass::KernelHardwareInfo::query_device_multiprocessor_count(hw_info.device_id);
//   }

//   typename DeviceKernel::ElementC* ptrC = (C == at::nullopt) ?
//                                           nullptr :
//                                           reinterpret_cast<typename DeviceKernel::ElementC*>(C->contiguous().data_ptr());
//   at::Tensor D = B.new_empty({M, N}, torch::kF16);

//   const cutlass::half_t* A_ = reinterpret_cast<typename DeviceKernel::ElementA*>(A.contiguous().data_ptr());
//   const cutlass::half_t* B_ = reinterpret_cast<typename DeviceKernel::ElementB*>(B.contiguous().data_ptr());
//   const cutlass::half_t* C_ = nullptr;
//   cutlass::half_t* D_ = reinterpret_cast<typename DeviceKernel::ElementC*>(D.contiguous().data_ptr());
//   ElementCompute alpha_ = ElementCompute(alpha);
//   ElementCompute beta_ = ElementCompute(beta);

//   typename DeviceKernel::Arguments arguments{
//     cutlass::gemm::GemmUniversalMode::kGemm,
//     {M, N, K, L}, // problem size
//     {
//       A_, // ptrA
//       cutlass::make_cute_packed_stride(StrideA{}, cute::make_shape(M, K, L)), // stride A
//       B_, // ptrB
//       cutlass::make_cute_packed_stride(StrideB{}, cute::make_shape(N, K, L)), // stride B
//     },
//     {
//       {alpha_, beta_},
//       C_, // ptrC
//       cutlass::make_cute_packed_stride(StrideC{}, cute::make_shape(M, N, L)), // stride C
//       D_, // ptrD
//       cutlass::make_cute_packed_stride(StrideD{}, cute::make_shape(M, N, L)), // stride D
//     },
//     hw_info
//   };

//   size_t workspace_size = DeviceKernel::get_workspace_size(arguments);
//   cutlass::device_memory::allocation<uint8_t> workspace(workspace_size);

//   DeviceKernel gemm_op;
//   cutlass::Status status = gemm_op.run(arguments,
//                                        workspace.get(),
//                                        nullptr);     // CUDA stream

//   TORCH_CHECK(status == cutlass::Status::kSuccess, "CUTLASS kernel failed");
//   return D;
// }

/* =========================================================
 * 1.  CUDA‑graph–safe context (cooperative, out‑variant)
 * ===================================================== */
template<
    int T1, int T2, int T3,        // warp tile
    int C1, int C2, int C3>        // cluster tile
class TmaCoopCtxOut {
 public:
  /* ---------- type aliases (type list 동일) ------------------ */
  using CollectiveEpilogue =
      typename cutlass::epilogue::collective::CollectiveBuilder<
          cutlass::arch::Sm90, cutlass::arch::OpClassTensorOp,
          cute::Shape<cute::Int<T1>, cute::Int<T2>, cute::Int<T3>>,
          cute::Shape<cute::_1,  cute::_1,  cute::_1>,
          cutlass::epilogue::collective::EpilogueTileAuto,
          float, float,
          cutlass::half_t, cutlass::layout::ColumnMajor, 8,
          cutlass::half_t, cutlass::layout::ColumnMajor, 8,
          EpilogueScheduleType>::CollectiveOp;

  using CollectiveMainloop =
      typename cutlass::gemm::collective::CollectiveBuilder<
          cutlass::arch::Sm90, cutlass::arch::OpClassTensorOp,
          cutlass::half_t, cutlass::layout::RowMajor,    8,
          cutlass::half_t, cutlass::layout::ColumnMajor, 8,
          float,
          cute::Shape<cute::Int<T1>, cute::Int<T2>, cute::Int<T3>>,
          cute::Shape<cute::Int<C1>, cute::Int<C2>, cute::Int<C3>>,
          cutlass::gemm::collective::StageCountAutoCarveout<
              static_cast<int>(sizeof(typename CollectiveEpilogue::SharedStorage))>,
          MainloopScheduleType>::CollectiveOp;

  using GemmKernel = cutlass::gemm::kernel::GemmUniversal<
                         cute::Shape<int,int,int,int>,
                         CollectiveMainloop,
                         CollectiveEpilogue,
                         TileSchedulerType>;

  using DeviceKernel   = cutlass::gemm::device::GemmUniversalAdapter<GemmKernel>;
  using ElementCompute = typename DeviceKernel::EpilogueOutputOp::ElementCompute;

  using StrideA = typename DeviceKernel::GemmKernel::StrideA;
  using StrideB = typename DeviceKernel::GemmKernel::StrideB;
  using StrideC = typename DeviceKernel::GemmKernel::StrideC;
  using StrideD = typename DeviceKernel::GemmKernel::StrideD;

  /* ---------- public API ------------------------------------- */
  void initialize(const at::Tensor& A,
                  const at::Tensor& B,
                  const at::Tensor& D) {
    queryShapes(A,B,D);
    createWorkspace(A.device());            // workspace only
    buildArguments(A,B,D);                  // ptr 포함
    initialized = true;
  }

  void maybe_reinitialize(const at::Tensor& A,
                          const at::Tensor& B,
                          const at::Tensor& D) {
    if (!initialized || !sameShape(A,B,D)) {
      initialize(A,B,D);
    }
  }

  void refresh_arguments(const at::Tensor& A,
                         const at::Tensor& B,
                         const at::Tensor& D) {
    buildArguments(A,B,D);
  }

  void run(cudaStream_t stream,
           const at::Tensor& A,
           const at::Tensor& B,
           const at::Tensor& D) {
    refresh_arguments(A,B,D);
    auto status = gemm_op.run(args,
                              workspace.data_ptr<uint8_t>(),
                              stream);
    TORCH_CHECK(status == cutlass::Status::kSuccess,
                "CUTLASS GEMM failed");
  }

  bool sameShape(const at::Tensor& A,
                 const at::Tensor& B,
                 const at::Tensor& D) const {
    return (A.size(0)==M && B.size(0)==N &&
            A.size(1)==K &&             // K
            D.size(0)==M && D.size(1)==N);
  }

 private:
  /* ---------- helpers ---------------------------------------- */
  void queryShapes(const at::Tensor& A,
                   const at::Tensor& B,
                   const at::Tensor& /*D*/) {
    M = static_cast<int>(A.size(0));
    N = static_cast<int>(B.size(0));
    K = static_cast<int>(A.size(1));
  }

  void createWorkspace(const at::Device& dev) {
    size_t ws_bytes =
        DeviceKernel::get_workspace_size(
            typename DeviceKernel::Arguments{});
    workspace = at::empty({static_cast<long>(ws_bytes)},
                          at::dtype(at::kByte).device(dev));
  }

  void buildArguments(const at::Tensor& A,
                      const at::Tensor& B,
                      const at::Tensor& D) {
    const cutlass::half_t* A_ =
        reinterpret_cast<const cutlass::half_t*>(A.contiguous().data_ptr());
    const cutlass::half_t* B_ =
        reinterpret_cast<const cutlass::half_t*>(B.contiguous().data_ptr());
    cutlass::half_t* D_ =
        reinterpret_cast<cutlass::half_t*>(D.data_ptr());

    int dev_id;  cudaGetDevice(&dev_id);
    hw_info.device_id = dev_id;
    hw_info.sm_count =
        cutlass::KernelHardwareInfo::query_device_multiprocessor_count(dev_id);

    args = typename DeviceKernel::Arguments{
      cutlass::gemm::GemmUniversalMode::kGemm,
      {M, N, K, /*L=*/1},

      /* A, B */
      {
        A_,
        cutlass::make_cute_packed_stride(StrideA{},
          cute::make_shape(M, K, 1)),
        B_,
        cutlass::make_cute_packed_stride(StrideB{},
          cute::make_shape(N, K, 1))
      },

      /* epilogue (C=null, α=1, β=0) */
      {
        {ElementCompute(1.f), ElementCompute(0.f)},
        nullptr,
        cutlass::make_cute_packed_stride(StrideC{},
          cute::make_shape(M, N, 1)),
        D_,
        cutlass::make_cute_packed_stride(StrideD{},
          cute::make_shape(M, N, 1))
      },

      hw_info
    };
  }

  /* ---------- data members ----------------------------------- */
  bool                         initialized{false};
  int                          M{0}, N{0}, K{0};
  at::Tensor                   workspace;
  typename DeviceKernel::Arguments args;
  DeviceKernel                 gemm_op;
  cutlass::KernelHardwareInfo  hw_info;
};

/* =========================================================
 * 2.  PyBind‑exposed wrapper ( *_out variant)
 * ===================================================== */
template<
    int T1, int T2, int T3,
    int C1, int C2, int C3>
void cutlass_tma_warp_specialized_cooperative_kernel(
    const at::Tensor& A,
    const at::Tensor& B,
    at::Tensor& D) {

  TORCH_CHECK(A.device().is_cuda() && B.device().is_cuda() && D.device().is_cuda(),
              "All tensors must be CUDA tensors");
  TORCH_CHECK(A.dtype() == torch::kF16 && B.dtype() == torch::kF16 && D.dtype() == torch::kF16,
              "All tensors must be torch.float16");
  TORCH_CHECK(A.size(1) == B.size(1), "K dimension mismatch (A.cols vs B.cols)");
  TORCH_CHECK(D.is_contiguous(),      "Output tensor D must be contiguous");
  TORCH_CHECK(D.size(0) == A.size(0) && D.size(1) == B.size(0),
              "D must have shape (M, N)");

  static thread_local
      TmaCoopCtxOut<T1,T2,T3,C1,C2,C3> ctx;

  ctx.maybe_reinitialize(A,B,D);

  cudaStream_t stream = at::cuda::getCurrentCUDAStream();
  ctx.run(stream, A, B, D);
}

// Should HOLD : T1 >= 128, T3 >= 64, 29 functions

template void cutlass_tma_warp_specialized_cooperative_kernel<128, 16, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 16, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 16, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<128, 16, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 32, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 32, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 32, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<128, 32, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 64, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 64, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 64, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<128, 64, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 128, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 128, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<128, 128, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<128, 128, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 256, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 256, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<128, 256, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<128, 256, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 512, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<128, 512, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<128, 512, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<128, 512, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);

template void cutlass_tma_warp_specialized_cooperative_kernel<256, 16, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 16, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<256, 16, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<256, 16, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 32, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 32, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<256, 32, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<256, 32, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 64, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 64, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<256, 64, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<256, 64, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 128, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 128, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<256, 128, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<256, 128, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 256, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<256, 256, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<256, 256, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<256, 256, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 512, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<256, 512, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<256, 512, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<256, 512, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);

template void cutlass_tma_warp_specialized_cooperative_kernel<512, 16, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 16, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 16, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 16, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<512, 32, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 32, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 32, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 32, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<512, 64, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 64, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 64, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 64, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<512, 128, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 128, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 128, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 128, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<512, 256, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 256, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 256, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 256, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 512, 64, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 512, 128, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 512, 256, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
//template void cutlass_tma_warp_specialized_cooperative_kernel<512, 512, 512, 2, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);



template void cutlass_tma_warp_specialized_cooperative_kernel<128, 16, 64, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 16, 128, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 16, 256, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 32, 64, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 32, 128, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 32, 256, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 64, 64, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 64, 128, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 64, 256, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 128, 64, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 128, 128, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 256, 64, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 256, 128, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);

template void cutlass_tma_warp_specialized_cooperative_kernel<256, 16, 64, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 16, 128, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 32, 64, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 32, 128, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 64, 64, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 64, 128, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 128, 64, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 128, 128, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 256, 64, 1, 2, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);



template void cutlass_tma_warp_specialized_cooperative_kernel<128, 16, 64, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 16, 128, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 16, 256, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 32, 64, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 32, 128, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 32, 256, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 64, 64, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 64, 128, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 64, 256, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 128, 64, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 128, 128, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 256, 64, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<128, 256, 128, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);

template void cutlass_tma_warp_specialized_cooperative_kernel<256, 16, 64, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 16, 128, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 32, 64, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 32, 128, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 64, 64, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 64, 128, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 128, 64, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 128, 128, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
template void cutlass_tma_warp_specialized_cooperative_kernel<256, 256, 64, 1, 1, 1>(const at::Tensor& A, const at::Tensor& B, at::Tensor& D);
